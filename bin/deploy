#!/usr/bin/env ruby

require 'deploy'
require 'fileutils'

# TODO: Allow creation of environments from install command, for example
# `deploy install live dev` would create a file with live and dev
# configurations to be filled in

# TODO: Allow pre/post-deploy tasks to be run on a per-environment basis for 
# both local and remote servers. That could help some people, but not really
# needed for a while yet.

def help
	%Q(
  Usage: deploy [COMMAND] [OPTIONS] [ENVIRONMENTS]

  Commands:
  
  	[env...]			     Deploys listed environments
  	reverse [env...]      Downloads listed environments \(aliased as `r` or `rev`\) 
  	download [env...]     Downloads listed environments \(aliased as `d` or `down`\)
  	
  	install               Configure directory for deployment
  	list					 Lists all configured environments
  	config FILENAME       Changes the deployment config file name
  	help                  Prints this help document
  	version               Prints the siteleaf gem version
  	
  Environments:
  	[env...]              Deploys listed environments
  	
  	If no commands, environments, or options are given,
  	the first environment in the config file will be deployed.

  Options:
  	-h, --help            Prints this help document
  	-v, --version         Prints the deploy gem version

  See https://github.com/rosszurowski/deploy for additional documentation.
  )
end


def install
	
	if File.exist?(Deploy::CONFIG_PATH)
		
		puts "Deployment configuration file `#{Deploy::CONFIG_PATH}` already exists."
		
		# Use a Y/n prompt to see if things should be overwritten
		prompt = "Would you like to overwrite it?"
		answer = ''
		default = 'y'
		until %w[y n].include? answer
			print prompt + ' [Y/n]:'
			answer = STDIN.gets.chomp.downcase
			answer = default if answer.length == 0
		end
		
		if(answer == 'y')
			File.open(Deploy::CONFIG_PATH, 'w+') do |file|
				file.puts 'server_name:','  host: ""','  user: ""','  pass: ""','  path:','    local: "/"','    remote: "/public_html/"'
			end
			puts "Configuration file `#{Deploy::CONFIG_PATH}` created."
		else
			puts "No congifuration file has been installed."
		end
		
	else
		
		File.open(Deploy::CONFIG_PATH, 'w+') do |file|
			file.puts 'server_name:','  host: ""','  user: ""','  pass: ""','  path:','    local: "/"','    remote: "/public_html/"'
		end
		puts "Configuration file `#{Deploy::CONFIG_PATH}` created."
		
	end
	
end

def set_config(new_path)
	unless ARGV[1].empty?
		File.open(Deploy::GEM_SETTINGS_PATH, 'w+') do |file|
			# Remove illegal characters and add to file
			file.puts 'config_path: ' + new_path
		end
		puts "Configuration file renamed to `#{new_path}`"
	else
		puts "Please provide a name for configuration files. See `deploy help` for more details."
	end
end

def list
	if File.exist?(Deploy::CONFIG_PATH)
		deploy = Deploy::Deployment.new
		
		# List out environments
		longest_env = (deploy.environments.sort { |a, b| a.name.length <=> b.name.length }).last
		deploy.environments.each.with_index(1) do |env, i|
			printf "* \e[91m%-#{longest_env.name.length + 3}s\e[0m %s\n", "#{env.name}", "(#{env.config[:user]}@#{env.config[:host]})"
		end
		
	else
		puts "No config file found, run `deploy install` to create one"
		exit
	end
end

def go(rev=false)
	if File.exist?(Deploy::CONFIG_PATH)
		deploy = Deploy::Deployment.new
		deploy.reverse = rev
		# Pass the arguments to the deploy, but remove the reverse command
		deploy.go ARGV.reject { |cmd| cmd =~ /\b((?:r)|(?:rev)|(?:reverse)|(?:d)|(?:down)|(?:download))\b/i }
	else
		puts "No config file found, run `deploy install` to create one"
		exit
	end
end

# See if they're running a command
case ARGV[0]
when '-v', '--version', 'version'
	puts "Deploy v" + Deploy::VERSION
	exit
when '-h', '--help', 'help'
	puts help
	exit
when 'install', 'setup'
	install
	exit
when 'r', 'rev', 'reverse',
	 'd', 'down', 'download'
	# Run the deploy in reverse
	go(true)
	exit
when 'list'
	list
	exit
when 'config'
	set_config ARGV[1].gsub(/[^\w\.]/, '_')
	exit
end


# Run the deploy straight if nothing else triggered
go(false)